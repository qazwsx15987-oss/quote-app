const API_URL = "https://script.google.com/macros/s/AKfycbyJLqrtYiCQ-POYDBZbl5-XYIp4O8um-g_2lt-q2XMNPOk_NLkgWVbnyn14wkrqwwND7A/exec";


// üõ†Ô∏è H√†m t·∫°o ID thi·∫øt b·ªã (L∆∞u ID v√†o localStorage ƒë·ªÉ nh·∫≠n di·ªán thi·∫øt b·ªã)
function getDeviceId() {
    let deviceId = localStorage.getItem("deviceId");
    if (!deviceId) {
        deviceId = "device-" + Math.random().toString(36).substr(2, 9);
        localStorage.setItem("deviceId", deviceId);
    }
    return deviceId;
}

// üõ†Ô∏è H√†m l·∫•y ng√†y hi·ªán t·∫°i (YYYY-MM-DD)
function getToday() {
    return new Date().toISOString().split("T")[0];
}

// üõ†Ô∏è H√†m l·∫•y th·ªùi gian reset v√†o 5h s√°ng h√¥m nay/mai
function getResetTime() {
    let now = new Date();
    let resetTime = new Date();

    // N·∫øu hi·ªán t·∫°i ƒë√£ qua 5h s√°ng, th√¨ ƒë·∫∑t reset v√†o 5h s√°ng ng√†y mai
    if (now.getHours() >= 5) {
        resetTime.setDate(now.getDate() + 1);
    }

    // ƒê·∫∑t resetTime th√†nh 5h s√°ng
    resetTime.setHours(5, 0, 0, 0);

    return resetTime.getTime(); // Tr·∫£ v·ªÅ timestamp (milliseconds)
}

// üõ†Ô∏è H√†m ki·ªÉm tra xem ƒë√£ ƒë·∫øn th·ªùi ƒëi·ªÉm reset ch∆∞a
function shouldResetQuote(deviceId) {
    const lastReset = localStorage.getItem(`${deviceId}-lastReset`) || 0;
    const nextReset = getResetTime();
    return Date.now() >= nextReset; // N·∫øu th·ªùi gian hi·ªán t·∫°i >= 5h s√°ng, c·∫ßn reset
}

// üõ†Ô∏è H√†m l·∫•y quote ƒë√£ l∆∞u cho thi·∫øt b·ªã trong ng√†y (n·∫øu c√≥)
function getStoredQuote(deviceId) {
    return localStorage.getItem(`${deviceId}-quote`) || null;
}

// üõ†Ô∏è H√†m l·∫•y danh s√°ch quote t·ª´ Google Sheets
async function fetchQuotes() {
    try {
        const response = await fetch(API_URL);
        const data = await response.json();
        return data.quotes; 
    } catch (error) {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", error);
        return [];
    }
}

// üõ†Ô∏è H√†m ch·ªçn quote ng·∫´u nhi√™n (kh√¥ng tr√πng l·∫∑p v·ªõi nh·ªØng quote ƒë√£ nh·∫≠n)
function getRandomQuote(deviceId, quotes) {
    let usedQuotes = JSON.parse(localStorage.getItem(`${deviceId}-usedQuotes`)) || [];

    // L·ªçc ra danh s√°ch quote ch∆∞a t·ª´ng ƒë∆∞·ª£c s·ª≠ d·ª•ng
    let availableQuotes = quotes.filter(q => !usedQuotes.includes(q));

    // N·∫øu h·∫øt quote, reset l·∫°i danh s√°ch
    if (availableQuotes.length === 0) {
        usedQuotes = [];
        availableQuotes = quotes;
    }

    // Ch·ªçn ng·∫´u nhi√™n 1 c√¢u t·ª´ danh s√°ch ch∆∞a d√πng
    let selectedQuote = availableQuotes[Math.floor(Math.random() * availableQuotes.length)];

    // C·∫≠p nh·∫≠t danh s√°ch quote ƒë√£ d√πng
    usedQuotes.push(selectedQuote);
    localStorage.setItem(`${deviceId}-usedQuotes`, JSON.stringify(usedQuotes));

    // L∆∞u quote m·ªõi
    localStorage.setItem(`${deviceId}-quote`, selectedQuote);
    localStorage.setItem(`${deviceId}-lastReset`, Date.now()); // C·∫≠p nh·∫≠t th·ªùi gian reset m·ªõi

    return selectedQuote;
}

// üõ†Ô∏è H√†m hi·ªÉn th·ªã quote v√† th√¥ng b√°o reset
async function getQuote() {
    const quotes = await fetchQuotes();
    if (quotes.length === 0) {
        document.getElementById("quote").textContent = "Kh√¥ng th·ªÉ t·∫£i quote.";
        return;
    }

    const deviceId = getDeviceId();
    let storedQuote = getStoredQuote(deviceId);

    // Ki·ªÉm tra n·∫øu ƒë√£ qua 5h s√°ng -> C·∫≠p nh·∫≠t quote m·ªõi
    if (!storedQuote || shouldResetQuote(deviceId)) {
        storedQuote = getRandomQuote(deviceId, quotes);
    }

    document.getElementById("quote").textContent = storedQuote;
    document.getElementById("reset-time").textContent = `B·∫°n s·∫Ω nh·∫≠n quote m·ªõi v√†o l√∫c 5h s√°ng (${new Date(getResetTime()).toLocaleString("vi-VN")})`;
}

document.addEventListener("DOMContentLoaded", getQuote);
